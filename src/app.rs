use clap::{crate_name, crate_version, App, AppSettings, Arg, ArgGroup};

pub fn build_app() -> App<'static> {
    App::new(crate_name!())
        .version(crate_version!())
        .about("Command line tool to keep your local maven repository small and tidy.")
        .global_setting(AppSettings::ColoredHelp)
        .global_setting(AppSettings::VersionlessSubcommands)
        .setting(AppSettings::DeriveDisplayOrder)
        .setting(AppSettings::DisableHelpSubcommand)
        .setting(AppSettings::GlobalVersion)
        .setting(AppSettings::SubcommandRequired)
        .arg(Arg::new("groups")
            .short('g')
            .long("groups")
            .value_name("GROUPS")
            .about("Selects artifacts based on the group ID. Subgroups are included by default.")
            .takes_value(true))
        .arg(Arg::new("artifacts")
            .short('a')
            .long("artifacts")
            .value_name("ARTIFACTS")
            .about("Selects artifacts based on the artifact ID. Supports globbing like in 'maven-*-plugin'.")
            .takes_value(true))
        .arg(Arg::new("versions")
            .short('v')
            .long("versions")
            .value_name("VERSIONS")
            .about("Selects artifacts based on version (ranges). Use '<n>..' to select the n most recent versions, '..<n>' to select the n oldest versions and '<version>' to select one specific version only.")
            .takes_value(true))
        .arg(Arg::new("releases")
            .short('r')
            .long("releases")
            .about("Selects released artifacts only")
            .conflicts_with("snapshots"))
        .arg(Arg::new("snapshots")
            .short('s')
            .long("snapshots")
            .about("Selects snapshot artifacts only")
            .conflicts_with("releases"))
        .group(ArgGroup::new("filter")
            .args(&["groups", "artifacts", "versions", "releases", "snapshots"])
            .multiple(true)
            .required(true))
        .arg(Arg::new("dry-run")
            .short('d')
            .long("dry-run")
            .about("Does not remove artifacts"))
        .arg(Arg::new("list")
            .long("list")
            .about("Prints the full path to the artifacts that will be removed"))
        .arg(Arg::new("local-repository")
            .short('l')
            .long("local-repository")
            .value_name("LOCAL_REPOSITORY")
            .about("Sets the location of the local maven repository. Respects the directory configured in '~/.m2/settings.xml'. Falls back to '~/.m2/repository', if nothing has been specified or configured.")
            .takes_value(true))
        .subcommand(App::new("keep")
            .about("Keeps the artifacts matched by the filters and removes the rest"))
        .subcommand(App::new("rm")
            .about("Removes the artifacts matched by the filters and keeps the rest"))
}
